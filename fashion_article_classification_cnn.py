# -*- coding: utf-8 -*-
"""fashion_article_classification_cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lLhjELqioGaxsnpZpCVoeicQ0fEMdxWm
"""

#necessary import
import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras import layers, datasets, models

#Load fashion mnist dataset from tensorflow
(x_train, y_train), (x_test, y_test) = datasets.fashion_mnist.load_data()

print('Shape of training dataset X_train:')
print(x_train.shape)
print('Shape of test dataset X_test:')
print(x_test.shape)

#reshape the traning data and test data 
# X_train and X_test contains the reshaped data
X_train = x_train.reshape(60000, 28, 28,1)
X_test = x_test.reshape(10000, 28, 28,1)

print('training and test data reshaped for tensor as 60000x28x28x1, 10000x28x28x1 respectively' )

#normalizing the data 
X_train = X_train/255
X_test = X_test/255

#there are 10 classes in the dataset
classes = ["T-shirt/top", "Trouser", "Pullover",	"Dress", "Coat", 	"Sandal",	"Shirt",	"Sneaker", "Bag", "Ankle boot"]

#define a function to show the image with its class name from the training dataset
def show_sample(X, y, index):
  plt.figure(figsize=(15,2)) #reducing the image size for clear imshow
  plt.imshow(X[index],cmap=plt.cm.binary)
  plt.xlabel('ClasseName: '+classes[y[index]])

#show a sample from training images
show_sample(x_train, y_train, 11)

# creating the cnn model
cnn_model = models.Sequential([
                         #first set of conv+pooling with 32 filters of size 3x3
                         layers.Conv2D(filters=64, kernel_size= (3,3), activation='relu', input_shape= (28,28,1)),
                         layers.MaxPool2D(2,2),
                         #second set of conv+pooling with 32 filters of size 3x3
                         layers.Conv2D(filters=64, kernel_size= (3,3), activation='relu'), 
                         layers.MaxPool2D(2,2),

                         #flat after after conv+pooling
                         layers.Flatten(),
                         #dense layer with 64 neurons/units and relu activation function
                         layers.Dense(128, activation='relu'),

                         #last/output dense layer with 10 neurons/units since there are 10 y_train classes
                         #activation function is softmax for probality distribution
                         layers.Dense(10, activation='softmax')                    
                         ])

#add optimizer(adam) and loss function to cnn model
cnn_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics='accuracy')

#fit the cnn model/train data with cnn_model
cnn_model.fit(X_train, y_train, epochs=10)

#save the model after training is done 
cnn_model.save('fashion_article_classification_cnn.model')

#reshape y_test
y_test=y_test.reshape(-1,)
y_test[:5]

#show an image with its classname from test samples using show_sample() function defined above 
# for showing sample x_test(without reshaping) instead of X_test is used 
print('Class Index: '+str(y_test[10]))
show_sample(x_test, y_test, 10)

#load the pretrained model which is saved here after training
trained_cnn_model = models.load_model('fashion_article_classification_cnn.model')

#use trained_cnn_model to predict the x_test
predictions = trained_cnn_model.predict([X_test])

# Check the y value(class_index) prediction for the index 10 of x_test which lies in predictions[10]
print('ClassIndex for sample in X_test[10]:'+str(np.argmax(predictions[10])))
classindex= int(np.argmax(predictions[10]))
print('ClassName: '+classes[classindex])

"""Prediction from thr cnn model matches with the image class"""

#evaluate overall performance of the cnn_model
(validation_loss, validation_accuracy) = trained_cnn_model.evaluate(X_test, y_test)
print('Loss: '+ str(validation_loss))
print('accuracy: '+ str(validation_accuracy))